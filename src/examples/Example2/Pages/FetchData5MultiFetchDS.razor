@page "/fetchdata-multids"
@inject HttpClient Http

<h1>Sample Albums &amp; Photos</h1>

<p>This sample demonstrates two inter-related custom Datasources working together.</p>

<div style="margin: 5px 0; border: solid 2px blue; background-color: #ffa; padding: 10px;">
    <i>Server backend hosted by <a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a> - <b>thank you!</b></i>
    <div><b>Ocassionally , the backend server may be down for maintenance or show CORS errors, please try again later.</b></div>
</div>

<div style="margin: 15px 0;">
    <button class="btn btn-primary" @onclick="SizeToFitCols">Size-to-Fit Columns</button>
    <button class="btn btn-primary" @onclick="SizeToFitCols500">Size-to-Fit 500 Columns</button>
    <button class="btn btn-primary" @onclick="AutosizeCols">Autosize Columns</button>
    <button class="btn btn-primary" @onclick="RefreshRows">Refresh Rows</button>
    <button class="btn btn-primary" @onclick="PurgeRows">Purge Rows</button>
</div>

@if (photoOp == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-lg">
        <div class="row">
            <div class="col">
                <h4>Albums:</h4>
                <AgGrid @ref="albumGrid" WidthStyle="100%" HeightStyle="500px"
                        Options="albumOp" Callbacks="albumCb" Events="albumEv">
                    <GridColumn IsResizable="true" IsSortable="true" Header="ID" Field="id" />
                    <GridColumn IsResizable="true" IsSortable="true" Header="User ID" Field="userId" />
                    <GridColumn IsResizable="true" IsSortable="true" Header="Title" Field="title" />
                </AgGrid>
            </div>

            <div class="col">
                <div class="container">
                    <div class="row">
                        <h4>Photos:</h4>
                        <AgGrid @ref="photoGrid" WidthStyle="100%" HeightStyle="230px"
                                Options="photoOp" Callbacks="photoCb" Events="photoEv">
                            <GridColumn IsResizable="true" IsSortable="true" Header="ID" Field="id" />
                            <GridColumn IsResizable="true" IsSortable="true" Header="Album ID" Field="albumId" />
                            <GridColumn IsResizable="true" IsSortable="true" Header="Title" Field="title" />
                            <GridColumn IsResizable="true" IsSortable="true" Header="URL" Field="url" />
                            <GridColumn IsResizable="true" IsSortable="true" Header="Thumbnail URL" Field="thumbnailUrl" />
                        </AgGrid>
                    </div>
                    @if (thumbnails == null)
                    {
                        <div class="row"><i>(select some photos to preview)</i></div>
                    }
                    else
                    {
                        <div class="row">
                            <h5>Thumbs:</h5>
                        </div>
                        <div class="row">
                            @foreach (var t in thumbnails)
                            {
                                <img style="border: dotted 1px #808080;" src="@t" />
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>


}

@code {
    private AgGrid albumGrid;
    private AlbumsDataSource albumDs;
    private GridOptions albumOp;
    private GridEvents albumEv;
    private GridCallbacks albumCb;

    private AgGrid photoGrid;
    private PhotosDataSource photoDs;
    private GridOptions photoOp;
    private GridEvents photoEv;
    private GridCallbacks photoCb;

    private IEnumerable<string> thumbnails;

    protected override void OnInitialized()
    {
        InitAlbums();
        InitPhotos();
    }

    private void InitAlbums()
    {
        albumDs = new AlbumsDataSource { Http = Http };
        albumOp = new GridOptions
        {
            Datasource = albumDs,
            EnablePagination = true,
            EnableRowDeselection = true,
            RowModelType = RowModelType.Infinite,
            RowSelection = RowSelection.Multiple,
            SuppressCellSelection = true,
        };
        albumCb = new GridCallbacks
        {
            GetRowNodeId = node =>
            {
                var id = node.GetProperty("id").ToString();
            //Console.WriteLine($"Got node: [{id}]");
            //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(node));
            return id;
            },
        };
        albumEv = new GridEvents
        {
            SelectionChanged = (Action<RowNode[]>)(nodes =>
            {
                var sel = nodes?.Select(n => n.Id).ToArray();
                Console.WriteLine("Album Selected: " + string.Join(",", sel));

                var prevCount = photoDs.AlbumIds?.Length ?? 0;
                photoDs.AlbumIds = sel;
                _ = Task.Run(async () =>
                {
                    try
                    {
                    // This seems to be necessary if the DS produced no
                    // rows previously, otherwise the grid doesn't update
                    if (prevCount == 0)
                            await photoGrid.Api.SetDatasource();
                        else
                            await photoGrid.Api.PurgeInfiniteCache();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Failed to update DS: " + ex.ToString());
                    }
                });
            }),
        };
    }

    private void InitPhotos()
    {
        photoDs = new PhotosDataSource { Http = Http };
        photoOp = new GridOptions
        {
            Datasource = photoDs,
            EnablePagination = true,
            PaginationPageSize = 20,
            EnableRowDeselection = true,
            RowModelType = RowModelType.Infinite,
            RowSelection = RowSelection.Multiple,
            SuppressCellSelection = true,
        };
        photoCb = new GridCallbacks
        {
            GetRowNodeId = node =>
            {
                var id = node.GetProperty("id").ToString();
            //Console.WriteLine($"Got node: [{id}]");
            //Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(node));
            return $"ID#{id}";
            },
        };
        photoEv = new GridEvents
        {
            SelectionChanged = (Action<RowNode[]>)(nodes =>
            {
                Console.WriteLine("Photo Selected: " + (nodes?.Length == 0
                    ? "none" : string.Join(",", nodes.Select(n => n.Id))));

                if ((nodes?.Length ?? 0) == 0)
                {
                    thumbnails = null;
                }
                else
                {
                    var opts = new System.Text.Json.JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    };
                    var photos = System.Text.Json.JsonSerializer.Deserialize<Photo[]>(
                        System.Text.Json.JsonSerializer.Serialize(
                            nodes.Select(n => n.Data), opts), opts);
                    thumbnails = photos.Select(p => p.ThumbnailUrl);
                }
                StateHasChanged();
            }),
        };
    }

    private async Task SizeToFitCols()
    {
        await photoGrid.Api.SizeColumnsToFit();
    }

    private async Task SizeToFitCols500()
    {
        await photoGrid.ColumnApi.SizeColumnsToFit(500);
    }

    private async Task AutosizeCols()
    {
        var colKeys = new[]
        {
            "id",
            "albumId",
            "title",
            "url",
            "thumbnailUrl",
        };
        await photoGrid.ColumnApi.AutoSizeColumns(colKeys);
    }

    private async Task RefreshRows()
    {
        await photoGrid.Api.RefreshInfiniteCache();
    }

    private async Task PurgeRows()
    {
        await photoGrid.Api.PurgeInfiniteCache();
    }

    class Album
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public string Title { get; set; }
    }

    class Photo
    {
        // Sample:
        //"albumId": 1,
        //"id": 1,
        //"title": "accusamus beatae ad facilis cum similique qui sunt",
        //"url": "https://via.placeholder.com/600/92c952",
        //"thumbnailUrl": "https://via.placeholder.com/150/92c952"

        public int Id { get; set; }
        public int AlbumId { get; set; }
        public string Title { get; set; }
        public string Url { get; set; }
        public string ThumbnailUrl { get; set; }
    }

    class AlbumsDataSource : IGridDatasource
    {
        public HttpClient Http { get; set; }

        public async Task GetRows(IGetRowsParams getParams)
        {
            try
            {
                var url = "https://jsonplaceholder.typicode.com/albums";

                // https://github.com/typicode/json-server#slice
                url += $"?_start={getParams.StartRow}";
                url += $"&_end={getParams.EndRow}";

                if (getParams.SortModel?.Length > 0)
                {
                    // https://github.com/typicode/json-server#sort
                    url += $"&_sort={string.Join(",", getParams.SortModel.Select(sm => sm.ColumnId))}";
                    url += $"&_order={string.Join(",", getParams.SortModel.Select(sm => sm.Direction))}";
                }

                // TODO: FILTER

                Console.WriteLine("Fetching from [{0}]", url);
                var resp = await Http.GetAsync(url);
                resp.EnsureSuccessStatusCode();

                // https://github.com/typicode/json-server#slice
                resp.Headers.TryGetValues("X-Total-Count", out var totalCountHeader);
                var totalCount = int.TryParse(totalCountHeader?.FirstOrDefault(), out var totalCountInt)
                    ? (int?)totalCountInt
                    : null;

                var albums = await Http.GetFromJsonAsync<Album[]>(url);
                //Console.WriteLine("From [{0}:{1}], got [{2}] row(s) out of [{3}]",
                //    getParams.StartRow, getParams.EndRow, photos.Length, totalCount);

                await getParams.SuccessCallback(albums, totalCount);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Failed to retrieve!");
                Console.WriteLine(ex.ToString());
                await getParams.FailCallback();
            }
        }

        public Task Destroy()
        {
            // Nothing to do
            return Task.CompletedTask;
        }
    }

    class PhotosDataSource : IGridDatasource
    {
        public HttpClient Http { get; set; }

        public string[] AlbumIds { get; set; }

        public async Task GetRows(IGetRowsParams getParams)
        {
            try
            {
                var url = "https://jsonplaceholder.typicode.com/photos?";

                if (AlbumIds?.Length > 0)
                {
                    foreach (var aid in AlbumIds)
                        url += $"&albumId={aid}";
                }
                else
                {
                    url += "&albumId=-1";
                }

                // https://github.com/typicode/json-server#slice
                url += $"&_start={getParams.StartRow}";
                url += $"&_end={getParams.EndRow}";

                if (getParams.SortModel?.Length > 0)
                {
                    // https://github.com/typicode/json-server#sort
                    url += $"&_sort={string.Join(",", getParams.SortModel.Select(sm => sm.ColumnId))}";
                    url += $"&_order={string.Join(",", getParams.SortModel.Select(sm => sm.Direction))}";
                }

                // TODO: FILTER

                Console.WriteLine("Fetching from [{0}]", url);
                var resp = await Http.GetAsync(url);
                resp.EnsureSuccessStatusCode();

                // https://github.com/typicode/json-server#slice
                resp.Headers.TryGetValues("X-Total-Count", out var totalCountHeader);
                var totalCount = int.TryParse(totalCountHeader?.FirstOrDefault(), out var totalCountInt)
                    ? (int?)totalCountInt
                    : null;

                var photos = await Http.GetFromJsonAsync<Photo[]>(url);
                //Console.WriteLine("From [{0}:{1}], got [{2}] row(s) out of [{3}]",
                //    getParams.StartRow, getParams.EndRow, photos.Length, totalCount);

                await getParams.SuccessCallback(photos, totalCount);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Failed to retrieve!");
                Console.WriteLine(ex.ToString());
                await getParams.FailCallback();
            }
        }

        public Task Destroy()
        {
            // Nothing to do
            return Task.CompletedTask;
        }
    }
}
